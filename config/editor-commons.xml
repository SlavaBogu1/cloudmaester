<mxEditor>
	<ui>
            <resource basename="resources/app"/>
	</ui>
	<mxDefaultPopupMenu as="popupHandler">
            <condition name="it_is_storage"><![CDATA[
                function (editor, cell, evt) { 
                    var res = cell.value.attributes["template"].textContent;                    
                    return (res === "aws_storage");
                }
            ]]></condition>                        
            <condition name="it_is_compute"><![CDATA[
                function (editor, cell, evt) {                  
                    var res = cell.value.attributes["template"].textContent;                                        
                    return (res === "aws_compute");
                }
            ]]></condition>            

		<add as="cut" action="cut" icon="images/cut.gif"/>
		<add as="copy" action="copy" icon="images/copy.gif"/>
		<add as="paste" action="paste" icon="images/paste.gif"/>
		<add as="delete" action="delete" icon="images/delete.gif" if="cell"/>
		<separator/>
                <add as="AWS Compute" if="it_is_compute" icon="images/aws/16/aws16.png">
                    <add as="EC2" action="UpdateAWSComponent"/>
                    <add as="Lightsail" action="UpdateAWSComponent"/>
                    <add as="ECS" aka="Elastic Container Service" action="UpdateAWSComponent"/>
                    <add as="EKS" aka="Elastic Kubernetes Service" action="UpdateAWSComponent"/>
                    <add as="Lambda" action="UpdateAWSComponent"/>
                    <add as="Batch" action="UpdateAWSComponent"/>
                    <add as="EB" aka="Elastic Beanstalk" action="UpdateAWSComponent"/>
                </add>
                <add as="AWS Storage" if="it_is_storage" icon="images/aws/16/aws16.png">
                    <add as="S3" action="UpdateAWSComponent" icon="images/aws/16/s3.png"/>
                    <add as="EFS" action="UpdateAWSComponent" icon="images/aws/16/efs.png"/>
                    <add as="Glacier" action="UpdateAWSComponent" icon="images/aws/16/glacier_16.png"/>
                    <add as="SG" aka="Storage Gateway" action="UpdateAWSComponent" icon="images/aws/16/sg16.png"/>
                </add>                    
                <separator/>
                <add as="Editor" if="cell">
                    <add as="shape" if="cell">
                            <add as="group" action="group" icon="images/group.gif" if="ncells"/>
                            <add as="ungroup" action="ungroup" icon="images/ungroup.gif" if="cell"/>
                            <separator/>
                            <add as="removeFromParent" action="removeFromParent" if="cell"/>
                            <separator/>
                            <add as="collapse" action="collapse" icon="images/collapse.gif" if="expandable"/>
                            <add as="expand" action="expand" icon="images/expand.gif" if="collapsable"/>
                            <separator/>
                            <add as="toFront" action="toFront" icon="images/tofront.gif" if="cell"/>
                            <add as="toBack" action="toBack" icon="images/toback.gif" if="cell"/>
                            <separator/>
                            <add as="editStyle" action="editStyle" if="cell"/>
                    </add>
                    <add as="format" if="cell">
                            <add as="fillColor" action="fillColor" icon="images/fillcolor.gif" if="cell"/>
                            <add as="gradientColor" action="gradientColor" if="cell"/>
                            <add as="strokeColor" action="strokeColor" icon="images/linecolor.gif" if="cell"/>
                            <separator/>
                            <add as="toggleRounded" action="toggleRounded" if="cell"/>
                            <add as="toggleShadow" action="toggleShadow" if="cell"/>
                    </add>
                    <add as="font" if="cell">
                            <add as="fontColor" action="fontColor" icon="images/fontcolor.gif" if="cell"/>
                            <add as="fontFamily" action="fontFamily" if="cell"/>
                            <add as="fontSize" action="fontSize" if="cell"/>
                            <separator/>
                            <add as="bold" action="bold" icon="images/bold.gif" if="cell"/>
                            <add as="italic" action="italic" icon="images/italic.gif" if="cell"/>
                    </add>
                </add>
		<add as="exitGroup" action="exitGroup" icon="images/up.gif" if="notRoot"/>
		<add as="enterGroup" action="enterGroup" icon="images/down.gif" if="validRoot"/>
		<add as="openHref" action="openHref" icon="images/link.gif"/>
		<separator/>
		<add as="properties" action="showProperties" icon="images/properties.gif"/>
	</mxDefaultPopupMenu>
	<include name="config/keyhandler-commons.xml"/>
	<Array as="actions">
		<add as="open"><![CDATA[
			function (editor)
			{
                            editor.open(mxUtils.prompt('Enter filename', 'workflow.xml'));
			}
		]]></add>
		<add as="openHref"><![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getCurrentRoot();

					if (cell == null)
					{
						cell = editor.graph.getModel().getRoot();
					}
				}

				if (cell != null)
				{
					var href = cell.getAttribute('href');
					
					if (href != null && href.length > 0)
					{
						window.open(href);
					}
					else
					{
						mxUtils.alert('No URL defined. Showing properties...');
						editor.execute('showProperties', cell);
					}
				}
			}
		]]></add>
		<add as="editStyle"><![CDATA[
			function (editor)
			{
				var cell = editor.graph.getSelectionCell();
				
				if (cell != null)
				{
					var model = editor.graph.getModel();
					var style = mxUtils.prompt(mxResources.get('enterStyle'), model.getStyle(cell) || '');

					if (style != null)
					{
						model.setStyle(cell, style);
					}
				}
			}
		]]></add>
		<add as="fillColor"><![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxResources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.model.beginUpdate();
					try
					{
						editor.graph.setCellStyles("strokeColor", color);
						editor.graph.setCellStyles("fillColor", color);
					}
					finally
					{
						editor.graph.model.endUpdate();
					}
				}
			}
		]]></add>
		<add as="gradientColor"><![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxResources.get('enterColorname'), 'white');
				
				if (color != null)
				{
					editor.graph.setCellStyles("gradientColor", color);
				}
			}
		]]></add>
		<add as="strokeColor"><![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxResources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.setCellStyles("strokeColor", color);
				}
			}
		]]></add>
		<add as="fontColor"><![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxResources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.setCellStyles("fontColor", color);
				}
			}
		]]></add>
		<add as="fontFamily"><![CDATA[
			function (editor)
			{
				var family = mxUtils.prompt(mxResources.get('enterFontfamily'), 'Arial');
				
				if (family != null && family.length > 0)
				{
					editor.graph.setCellStyles("fontFamily", family);
				}
			}
		]]></add>
		<add as="fontSize"><![CDATA[
			function (editor)
			{
				var size = mxUtils.prompt(mxResources.get('enterFontsize'), '10');
				
				if (size != null && size > 0 && size < 999)
				{
					editor.graph.setCellStyles("fontSize", size);
				}
			}
		]]></add>
		<add as="image"><![CDATA[
			function (editor)
			{
				var image = mxUtils.prompt(mxResources.get('enterImageUrl'),
					'examples/images/image.gif');
				
				if (image != null)
				{
					editor.graph.setCellStyles("image", image);
				}
			}
		]]></add>
		<add as="opacity"><![CDATA[
			function (editor)
			{
				var opacity = mxUtils.prompt(mxResources.get('enterOpacity'), '100');
				
				if (opacity != null && opacity >= 0 && opacity <= 100)
				{
					editor.graph.setCellStyles("opacity", opacity);
				}
			}
		]]></add>
		<add as="straightConnector"><![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("straightEdge");
			}
		]]></add>
		<add as="elbowConnector"><![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("");
			}
		]]></add>
		<add as="arrowConnector"><![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("arrowEdge");
			}
		]]></add>
		<add as="toggleOrientation"><![CDATA[
			function (editor, cell)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_HORIZONTAL, true);
			}
		]]></add>
		<add as="toggleRounded"><![CDATA[
			function (editor)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_ROUNDED);
			}
		]]></add>
		<add as="toggleShadow"><![CDATA[
			function (editor)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_SHADOW);
			}
		]]></add>
		<add as="horizontalTree"><![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getDefaultParent();
				}
				
				editor.treeLayout(cell, true);
			}
		]]></add>
		<add as="verticalTree"><![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getDefaultParent();
				}
				
				editor.treeLayout(cell, false);
			}
		]]></add>
	</Array>
</mxEditor>

<!--
//<![CDATA[
//                    function (editor, cell, evt, targetCell) {
//                        debugger;   
//                        //move cell to evt coordinates
//                        //var pt = mxUtils.convertPoint(
//                        //editor.graph.container, mxEvent.getClientX(evt),
//                        //mxEvent.getClientY(evt));
//                        //return editor.addVertex(targetCell, cell, pt.x, pt.y);
//                    }
//                ]]>
-->